{"remainingRequest":"/Users/liuzhao/Project/re-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhao/Project/re-vue/src/components/form-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhao/Project/re-vue/src/components/form-item.vue","mtime":1547194869000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport Emitter from '../mixins/emitter';\nimport AsyncValidator from 'async-validator';\n\nexport default {\n  name: \"iFormItem\",\n  mixins: [ Emitter ],\n  inject: ['form'],\n  props: {\n    label: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    prop: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      validateState: '',\n      validateMessage: '',\n    }\n  },\n  computed: {\n    fieldValue() {\n      return this.form.model[this.prop];\n    }\n  },\n  mounted() {\n    if (this.prop) {\n      this.dispatch(\"iForm\", \"on-form-item-add\", this);\n      this.setRules();\n    }\n  },\n  beforeDestroy() {\n    this.dispatch(\"iForm\", \"on-form-item-remove\", this);\n  },\n  methods: {\n    setRules() {\n      this.$on(\"on-form-change\", this.onFiledChange);\n      this.$on(\"on-form-blur\", this.onFiledBlur);\n    },\n    getRules() {\n      let formRules = this.form.rules;\n      formRules = formRules ? formRules[this.prop] : [];\n      return [].concat(formRules || []);\n    },\n    onFiledBlur() {\n      // blur触发校验\n      this.validate(\"blur\");\n    },\n    onFiledChange() {\n      // change触发校验\n      this.validate(\"change\");\n    },\n    filteredRules(trigger) {\n      const rules = this.getRules();\n      return rules.filter(rule => !rule.trigger || rule.trigger.indexOf(trigger) !== -1);\n    },\n    /**\n     * @param trigger   校验类型\n     * @param callback  回调函数\n     */\n    validate(trigger, callback = function() {}) {\n      // 根据 trigger 类型取得相应的校验方式\n      const rules = this.filteredRules(trigger);\n      if (!rules || rules.length === 0) {\n        return true;\n      }\n      this.validateState = \"validating\";\n      let descriptor = {};\n      descriptor[this.prop] = rules;\n\n      const validator = new AsyncValidator(descriptor);\n      let model = {};\n\n      model[this.prop] = this.fieldValue;\n\n      validator.validate(model, { firstFields: true }, errors => {\n        this.validateState = !errors ? 'success' : 'error';\n        this.validateMessage = errors ? errors[0].message : '';\n\n        callback(this.validateMessage);\n      });\n    }\n  }\n}\n",{"version":3,"sources":["form-item.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"form-item.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <label v-if=\"label\">{{ label }}</label>\n    <div>\n      <slot></slot>\n    </div>\n  </div>\n</template>\n<script>\n  import Emitter from '../mixins/emitter';\n  import AsyncValidator from 'async-validator';\n\n  export default {\n    name: \"iFormItem\",\n    mixins: [ Emitter ],\n    inject: ['form'],\n    props: {\n      label: {\n        type: String,\n        required: false,\n        default: ''\n      },\n      prop: {\n        type: String\n      }\n    },\n    data() {\n      return {\n        validateState: '',\n        validateMessage: '',\n      }\n    },\n    computed: {\n      fieldValue() {\n        return this.form.model[this.prop];\n      }\n    },\n    mounted() {\n      if (this.prop) {\n        this.dispatch(\"iForm\", \"on-form-item-add\", this);\n        this.setRules();\n      }\n    },\n    beforeDestroy() {\n      this.dispatch(\"iForm\", \"on-form-item-remove\", this);\n    },\n    methods: {\n      setRules() {\n        this.$on(\"on-form-change\", this.onFiledChange);\n        this.$on(\"on-form-blur\", this.onFiledBlur);\n      },\n      getRules() {\n        let formRules = this.form.rules;\n        formRules = formRules ? formRules[this.prop] : [];\n        return [].concat(formRules || []);\n      },\n      onFiledBlur() {\n        // blur触发校验\n        this.validate(\"blur\");\n      },\n      onFiledChange() {\n        // change触发校验\n        this.validate(\"change\");\n      },\n      filteredRules(trigger) {\n        const rules = this.getRules();\n        return rules.filter(rule => !rule.trigger || rule.trigger.indexOf(trigger) !== -1);\n      },\n      /**\n       * @param trigger   校验类型\n       * @param callback  回调函数\n       */\n      validate(trigger, callback = function() {}) {\n        // 根据 trigger 类型取得相应的校验方式\n        const rules = this.filteredRules(trigger);\n        if (!rules || rules.length === 0) {\n          return true;\n        }\n        this.validateState = \"validating\";\n        let descriptor = {};\n        descriptor[this.prop] = rules;\n\n        const validator = new AsyncValidator(descriptor);\n        let model = {};\n\n        model[this.prop] = this.fieldValue;\n\n        validator.validate(model, { firstFields: true }, errors => {\n          this.validateState = !errors ? 'success' : 'error';\n          this.validateMessage = errors ? errors[0].message : '';\n\n          callback(this.validateMessage);\n        });\n      }\n    }\n  }\n</script>\n"]}]}