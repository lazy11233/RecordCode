{"remainingRequest":"/Users/liuzhao/Project/re-vue/node_modules/babel-loader/lib/index.js!/Users/liuzhao/Project/re-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liuzhao/Project/re-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuzhao/Project/re-vue/src/components/form-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuzhao/Project/re-vue/src/components/form-item.vue","mtime":1547194869000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuzhao/Project/re-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport Emitter from '../mixins/emitter';\nimport AsyncValidator from 'async-validator';\nexport default {\n  name: \"iFormItem\",\n  mixins: [Emitter],\n  inject: ['form'],\n  props: {\n    label: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    prop: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      validateState: '',\n      validateMessage: ''\n    };\n  },\n  computed: {\n    fieldValue: function fieldValue() {\n      return this.form.model[this.prop];\n    }\n  },\n  mounted: function mounted() {\n    if (this.prop) {\n      this.dispatch(\"iForm\", \"on-form-item-add\", this);\n      this.setRules();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.dispatch(\"iForm\", \"on-form-item-remove\", this);\n  },\n  methods: {\n    setRules: function setRules() {\n      this.$on(\"on-form-change\", this.onFiledChange);\n      this.$on(\"on-form-blur\", this.onFiledBlur);\n    },\n    getRules: function getRules() {\n      var formRules = this.form.rules;\n      formRules = formRules ? formRules[this.prop] : [];\n      return [].concat(formRules || []);\n    },\n    onFiledBlur: function onFiledBlur() {\n      // blur触发校验\n      this.validate(\"blur\");\n    },\n    onFiledChange: function onFiledChange() {\n      // change触发校验\n      this.validate(\"change\");\n    },\n    filteredRules: function filteredRules(trigger) {\n      var rules = this.getRules();\n      return rules.filter(function (rule) {\n        return !rule.trigger || rule.trigger.indexOf(trigger) !== -1;\n      });\n    },\n\n    /**\n     * @param trigger   校验类型\n     * @param callback  回调函数\n     */\n    validate: function validate(trigger) {\n      var _this = this;\n\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n      // 根据 trigger 类型取得相应的校验方式\n      var rules = this.filteredRules(trigger);\n\n      if (!rules || rules.length === 0) {\n        return true;\n      }\n\n      this.validateState = \"validating\";\n      var descriptor = {};\n      descriptor[this.prop] = rules;\n      var validator = new AsyncValidator(descriptor);\n      var model = {};\n      model[this.prop] = this.fieldValue;\n      validator.validate(model, {\n        firstFields: true\n      }, function (errors) {\n        _this.validateState = !errors ? 'success' : 'error';\n        _this.validateMessage = errors ? errors[0].message : '';\n        callback(_this.validateMessage);\n      });\n    }\n  }\n};",{"version":3,"sources":["form-item.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <label v-if=\"label\">{{ label }}</label>\n    <div>\n      <slot></slot>\n    </div>\n  </div>\n</template>\n<script>\n  import Emitter from '../mixins/emitter';\n  import AsyncValidator from 'async-validator';\n\n  export default {\n    name: \"iFormItem\",\n    mixins: [ Emitter ],\n    inject: ['form'],\n    props: {\n      label: {\n        type: String,\n        required: false,\n        default: ''\n      },\n      prop: {\n        type: String\n      }\n    },\n    data() {\n      return {\n        validateState: '',\n        validateMessage: '',\n      }\n    },\n    computed: {\n      fieldValue() {\n        return this.form.model[this.prop];\n      }\n    },\n    mounted() {\n      if (this.prop) {\n        this.dispatch(\"iForm\", \"on-form-item-add\", this);\n        this.setRules();\n      }\n    },\n    beforeDestroy() {\n      this.dispatch(\"iForm\", \"on-form-item-remove\", this);\n    },\n    methods: {\n      setRules() {\n        this.$on(\"on-form-change\", this.onFiledChange);\n        this.$on(\"on-form-blur\", this.onFiledBlur);\n      },\n      getRules() {\n        let formRules = this.form.rules;\n        formRules = formRules ? formRules[this.prop] : [];\n        return [].concat(formRules || []);\n      },\n      onFiledBlur() {\n        // blur触发校验\n        this.validate(\"blur\");\n      },\n      onFiledChange() {\n        // change触发校验\n        this.validate(\"change\");\n      },\n      filteredRules(trigger) {\n        const rules = this.getRules();\n        return rules.filter(rule => !rule.trigger || rule.trigger.indexOf(trigger) !== -1);\n      },\n      /**\n       * @param trigger   校验类型\n       * @param callback  回调函数\n       */\n      validate(trigger, callback = function() {}) {\n        // 根据 trigger 类型取得相应的校验方式\n        const rules = this.filteredRules(trigger);\n        if (!rules || rules.length === 0) {\n          return true;\n        }\n        this.validateState = \"validating\";\n        let descriptor = {};\n        descriptor[this.prop] = rules;\n\n        const validator = new AsyncValidator(descriptor);\n        let model = {};\n\n        model[this.prop] = this.fieldValue;\n\n        validator.validate(model, { firstFields: true }, errors => {\n          this.validateState = !errors ? 'success' : 'error';\n          this.validateMessage = errors ? errors[0].message : '';\n\n          callback(this.validateMessage);\n        });\n      }\n    }\n  }\n</script>\n"],"sourceRoot":"src/components"}]}